#version 430 core

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec2 aTexCoord;
layout(location = 2) in vec3 aNormal;
layout(location = 3) in vec4 aTangent;

uniform mat4 pv;

struct InstanceData {
    mat4 model;
};

layout(std140,binding = 3) buffer instanceDataBuffer
{
    uint instanceCount;
    InstanceData[] Instances;
};


out VS_OUT
{
	vec2 TexCoord;
	vec3 Normal;
	mat3 TBN;
	vec4 PositionWS;   // Model space
	vec3 tang;
} VSOut;

void main() {

	mat4 m_Model = Instances[gl_InstanceID].model;

	gl_Position = (pv * m_Model) * vec4(aPos, 1.0);

	VSOut.PositionWS = (m_Model) * vec4(aPos, 1.0);

	vec4 Tangent = normalize(vec4(normalize(vec3(m_Model * vec4(aTangent.rgb, 0.0))).rgb,aTangent.w));
	VSOut.Normal = normalize( m_Model*vec4(aNormal,0)).xyz;
	VSOut.TexCoord = aTexCoord;

	// re-orthogonalize T with respect to N
	Tangent.rgb = normalize(Tangent.rgb -VSOut.Normal * dot( VSOut.Normal,Tangent.rgb));
	// then retrieve perpendicular vector B with the cross product of T and N
	vec3 B = normalize(cross(Tangent.rgb,VSOut.Normal )+ 0.0001) * sign(Tangent.w);

 	//if (dot(cross(VSOut.Normal, Tangent.rgb), B) < 0.0)
          //     Tangent.rgb = Tangent.rgb * -1.0;
				
	VSOut.TBN = mat3(Tangent.rgb, B, VSOut.Normal);
	VSOut.tang = Tangent.rgb;
}